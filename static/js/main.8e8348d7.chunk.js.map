{"version":3,"sources":["robofriends/reducers.js","robofriends/components/Card.js","robofriends/components/CardList.js","robofriends/components/SearchBox.js","robofriends/components/Scroll.js","robofriends/components/ErrorBoundry.js","robofriends/containers/App.js","robofriends/action.js","robofriends/constants.js","serviceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRequest","isPending","robots","error","Card","robot","name","email","id","className","src","alt","CardList","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","prop","style","overflowY","border","height","children","ErrorBoundry","props","state","this","setState","React","Component","App","onRequestRobots","onSearchChange","filteredRobots","filter","toLowerCase","includes","connect","buscarRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8e8348d7.chunk.js","sourcesContent":["import {\r\n\tCAMBIAR_BUSCAR_ROBOT,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const buscarRobots = (state=initialStateSearch, action={}) => {\r\n\t//console.log(action.type);\r\n\tswitch(action.type){\r\n\t\tcase CAMBIAR_BUSCAR_ROBOT: \r\n\t\treturn Object.assign({}, state, {searchField:action.payload});\r\n\t\t// Object Spread Operator\r\n\t\t// return { ...state, searchField:action.payload};\r\n\t\tdefault: return state;\r\n\t}\r\n}\r\n\r\nconst initialStateRequest = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRequest, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\treturn Object.assign({}, state, {isPending: true});\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\treturn Object.assign({}, state, {isPending: false, robots: action.payload});\r\n\t\tcase REQUEST_ROBOTS_FAILED: \r\n\t\treturn Object.assign({}, state, {isPending: false, error: action.payload});\r\n\t\tdefault: \r\n\t\treturn state;\r\n\t}\r\n}","import React from \"react\"; // Importante importar React para que el .js entienda JSX\r\n//import \"./Card.css\";\r\n\r\nconst Card = (robot)=> {\r\n\t\tconst {name, email, id} = robot;\r\n\r\n\treturn (\r\n\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img src={`https://robohash.org/${id}?200x200`} alt=\"imagen\"/>\t\r\n\t\t\t<div>\r\n\t\t\t\t<h2 className=\"name\">{name}</h2>\r\n\t\t\t\t<p className=\"email\">{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t\t);\r\n\r\n}\r\n\r\nexport default Card;","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({ robots })=> {\r\n\t// const {robots} = robots;\r\n\r\n/*\tconst cardArray = robots.map((user, i)=>{\r\n\t\treturn (\r\n\t\t\t <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\t\r\n\t\t\t);\r\n\t});\r\n\t//\t{cardArray}\t*/\t\r\n\treturn (\r\n\t\t<div>\t\r\n\t\t{\r\n\t\trobots.map((user, i)=>{\r\n\t\t\treturn (\r\n\t\t\t\t <Card\r\n\t\t\t\t key={i}\r\n\t\t\t\t id={robots[i].id}\r\n\t\t\t\t name={robots[i].name}\r\n\t\t\t\t email={robots[i].email}/>\t\r\n\t\t\t\t);\r\n\t\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t\t);\r\n\r\n}\r\n\r\nexport default CardList;","import React from \"react\";\r\n\r\nconst SearchBox = ({searchField, searchChange})=> {\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"Busca un robot\" onChange={searchChange}/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;  ","import React from \"react\";\r\n\r\nconst Scroll = (prop) => {\r\n\treturn (\r\n\t <div style={{overflowY:'scroll', border:'1px solid black', height:'77 vh'}}>\r\n\t \t{prop.children}\r\n\t </div>\r\n\t\t);\r\n}\r\n\r\nexport default Scroll;","import React from \"react\";\r\n\r\nclass ErrorBoundry extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\terror: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(){\r\n\t\tthis.setState({error:true});\r\n\t}\r\n\r\n\trender(){\r\n\t\tif (this.state.error) { return <h1>Lo siento, un error ha ocurrido.</h1>; }\r\n\t\treturn this.props.children;\r\n\t}\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\n//import {robots} from \"../components/robots\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundry from \"../components/ErrorBoundry\";\r\n\r\nimport {setBuscarRobot, requestRobots} from \"../action\";\r\n\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {searchField: \r\n\t//\tstate.searchField\t\t\t\t// Esto es si tuviésemos un sólo reducer\r\n\tstate.buscarRobots.searchField,     //  Esto es si tuviésemos muchos reducers\r\n\trobots: state.requestRobots.robots,\r\n\tisPending: state.requestRobots.isPending,\r\n\terror: state.requestRobots.error \r\n\t}; // return as an object\r\n} \r\nconst mapDispatchToProps = dispatch => {  // Se utiliza el Dispatch para enviar Acciones al Reducer \r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setBuscarRobot(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}; \r\n}\r\n\r\n\r\nclass App extends Component {\r\n\t// constructor(){\r\n\t// \tsuper();\t\r\n\t// \tthis.state = {\r\n\t// \t\trobots: [],\r\n\t// \t\t//\tsearchField: \"\"  Declarado en Redux\r\n\t// }\r\n\t//}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots();\r\n\t\t// Sin Redux\r\n\t\t// fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n\t\t// \t.then(response=>response.json())\r\n\t\t// \t.then(users=>this.setState({robots:users}));\r\n\t}\r\n\r\n\t// Ahora declarado como Propiedad gracias a Redux   (setBuscarRobot en reducers.js)\r\n\t// onSearchChange = (e) => {\r\n\t// \tthis.setState({ searchField: e.target.value });\r\n\t// }\r\n\r\n\trender(){\r\n\t\t//const { robots, searchField } = this.state;\r\n\t\tconst {searchField, onSearchChange, robots, isPending} = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t});\r\n\t\t//if(robots.length===0){   Sin Redux\r\n\t\t  if(isPending){\t\r\n\t\t\treturn <h1>Loading...</h1>\r\n\t\t} else {\r\n\t\treturn (\r\n\t\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<h1 className=\"f1\">RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange={//this.onSearchChange\r\n\t\t\t\t\tonSearchChange\r\n\t\t\t\t}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\r\n\t\t\t);\r\n\t\t}\r\n\t\r\n\t}\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import {\r\n\tCAMBIAR_BUSCAR_ROBOT,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from \"./constants\";\r\n\r\nexport const setBuscarRobot = (inputText) => {\r\n\t//\tconsole.log(inputText);\r\n\treturn {\r\n\t\ttype: CAMBIAR_BUSCAR_ROBOT,\r\n\t\tpayload: inputText \r\n\t}\r\n}\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\t\tdispatch({type: REQUEST_ROBOTS_PENDING})\t\r\n\t\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\r\n\t\t\t.then(response=>response.json())\r\n\t\t\t.then(data=>dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t\t\t.catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CAMBIAR_BUSCAR_ROBOT = 'CAMBIAR_BUSCAR_ROBOT';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// ROBOFRIENDS\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport {createStore, applyMiddleware, combineReducers} from \"redux\";\nimport {createLogger} from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport {buscarRobots, requestRobots} from \"./robofriends/reducers\";\nimport App from './robofriends/containers/App';\nimport \"tachyons\";\nimport './index.css';\n//import Card from \"./Card\";\n//import CardList from \"./CardList\";\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({buscarRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n\t// If you want your app to work offline and load faster, you can change\n\t// unregister() to register() below. Note this comes with some pitfalls.\n\t// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// ---------------------------------------------- //\n\n// TEMPLATE\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import \"tachyons\";\n// import './index.css';\n// import App from \"./maqueta/containers/App\";\n// import * as serviceWorker from './serviceWorker';\n\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// \t// If you want your app to work offline and load faster, you can change\n// \t// unregister() to register() below. Note this comes with some pitfalls.\n// \t// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\n\n// \t// Colores Novacor brand:   #452A9D #64598B   #FF9613 #FFAC44\n\n\n// ---------------------------------------------- //\n\n// TODO-REDUX\n// import React from \"react\";\n// import ReactDOM from \"react-dom\";\n// import \"./index.css\";\n// import * as serviceWorker from './serviceWorker';\n// import App from \"./todoredux/containers/App\";\n// \t//import {applyMiddleware, createStore} from \"redux\";\n// import {createStore} from \"redux\";\n// import {Provider} from \"react-redux\";\n// \t//import {createLogger} from \"redux-logger\";\n// \t//import thunkMiddleware from \"redux-thunk\";\n// import {manageTasksR} from \"./todoredux/reducers\";\n\n// \t//const logger = createLogger();\n// \t//const rootReducer = combineReducers({manageTaskR, addTaskR});\n// \t//const store = createStore(manageTasksR, applyMiddleware(thunkMiddleware, logger));\n// const store = createStore(manageTasksR);\n\n// //ReactDOM.render(<App />, document.getElementById('root'));\n// ReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// serviceWorker.unregister();\n"],"sourceRoot":""}